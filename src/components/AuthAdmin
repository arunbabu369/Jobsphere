/*import { updateDoc } from "firebase/firestore/lite";
import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from "react";
import Applicationcontext from "./Applicationcontext";

const Authcontext=createContext()


const hashmockPassword =(password)=>{
    return btoa(password)
}

export const Authprovider=({children})=>{
    console.count('Authprovider Renders')
    const[currentuser,setCurrentuser]=useState('')
    const[loading,setloading]=useState(true)
    const[allusers,setAllusers]=useState([])
    const[userloading,setUserloading]=useState(true)
    const {addApplicationrecord}=useContext(Applicationcontext)
    

    useEffect(()=>{
        setUserloading(true)
        try{
        const storedUsers=localStorage.getItem('currentuser')

        if(storedUsers){
            
            const parsedUser=JSON.parse(storedUsers)
            if(!parsedUser.savedjobs) parsedUser.savedjobs=[]
            if(!parsedUser.appliedjobs) parsedUser.appliedjobs=[]
            setCurrentuser(parsedUser)
            }
            else{
                setCurrentuser('')
            }
            const storedAllusers=JSON.parse(localStorage.getItem('users'))||[]
            setAllusers(storedAllusers)
        }
        catch(error){
            console.error("Error parsing stored user data from localStorage:",error)
            setCurrentuser('')
            setAllusers([])
            }
        finally{
            setUserloading(false)
            setloading(false)
        }    
        
        
    },[])

    const register=useCallback((username,password,email,role='jobseeker',companyname='')=>{
       
        
        if(allusers.some(user=>user.email===email)){
            throw new Error("User with email already exists")
        }
        const newuser={
            username,
            email,
            password:hashmockPassword(password),
            id:Date.now().toString(),
            savedjobs:[],
            appliedjobs:[],
            role:role,
            companyname: role === 'employer' ? companyname : ''
        }
        const updatedUser=[...allusers,newuser]
        setAllusers(updatedUser)
        localStorage.setItem('users',JSON.stringify(updatedUser))

        setCurrentuser(newuser)
        localStorage.setItem('currentuser',JSON.stringify(newuser))
        return newuser
    },[allusers,setCurrentuser])


    const login=useCallback((email,password)=>{
       // let users=JSON.parse(localStorage.getItem('users'))||[]//
        const enteredHashPass=hashmockPassword(password)

        const founduser=allusers.find(user=>
            user.email===email && user.password===enteredHashPass)
        console.log(founduser);
            

        if(founduser){
            setCurrentuser(founduser)
            localStorage.setItem('currentuser',JSON.stringify(founduser))
            return founduser
        }else{
            throw new Error("Invalid Username Or Password")
        }
    },[allusers,setCurrentuser])

    const logout=useCallback(()=>{
        setCurrentuser('')
        localStorage.removeItem('currentuser')
    },[setCurrentuser])

    const savejob=useCallback((jobTosave)=>{
        if(!currentuser){
            throw new Error("You must logged into saveJobs");
        }
        

        const userIndex=allusers.findIndex(user=>user.id===currentuser.id)
        const userToUpdate = { ...allusers[userIndex] }; 
        if (!userToUpdate.savedjobs) userToUpdate.savedjobs = [];
    

        const isJobsaved=userToUpdate.savedjobs.some(j=>j.id===jobTosave.id)
        
        

        if(isJobsaved){
            throw new Error("Job Already saved")
        }

        userToUpdate.savedjobs.push(jobTosave)
        const updatedAllUsers = [...allusers];
        updatedAllUsers[userIndex] = userToUpdate;
        setAllusers(updatedAllUsers);
        localStorage.setItem('users', JSON.stringify(updatedAllUsers));

        const updatedCurrentuser={...currentuser,savedjobs:[...currentuser.savedjobs,jobTosave]}
        setCurrentuser(updatedCurrentuser)
        localStorage.setItem('currentuser',JSON.stringify(updatedCurrentuser))
        
        return updatedCurrentuser.savedjobs

    },[currentuser,setCurrentuser,allusers])


    const unsave=useCallback((jobidTounsave)=>{
         if(!currentuser){
            throw new Error("You must logged into saveJobs");
        }

        const userIndex=allusers.findIndex(user=>user.id===currentuser.id)
    
        const userToUpdate = { ...allusers[userIndex] };
        if (!userToUpdate.savedjobs) userToUpdate.savedjobs = []
        const updatedsavedjobs=userToUpdate.savedjobs.filter(j=>j.id!==jobidTounsave)
        
        userToUpdate.savedjobs=updatedsavedjobs
        const updatedAllUsers = [...allusers]; 
        updatedAllUsers[userIndex] = userToUpdate;
        setAllusers(updatedAllUsers)
        localStorage.setItem('users',JSON.stringify(updatedAllUsers))

        const updatedCurrentuser={...currentuser,savedjobs:updatedsavedjobs}
        setCurrentuser(updatedCurrentuser)
        localStorage.setItem('currentuser',JSON.stringify(updatedCurrentuser))
        
        return updatedCurrentuser.savedjobs


    },[currentuser,setCurrentuser,allusers])

    
    const applyJob=useCallback((jobApplicationform)=>{
         if(!currentuser){
            throw new Error("You must logged into saveJobs");
        }
        const isApplied=currentuser.appliedjobs.some((appliedjob)=>appliedjob.id===jobApplicationform.id)

        if(isApplied){
            throw new Error("You have already applied for this job.");
        }
        const newApplicationrecord=addApplicationrecord(
            {
                jobid:jobApplicationform.jobId,
                jobtitle:jobApplicationform.jobtitle,
                company: jobApplicationform.company,
                employerId: jobApplicationform.employerId, // Link application to the employer who posted the job
                applicantId: currentuser.id, // ID of the job seeker who applied
                applicantName:jobApplicationform.applicantName || currentuser.username,
                applicantEmail:jobApplicationform.applicantEmail || currentuser.email,
                resumeLink: jobApplicationform.resumeLink,
            }
        )
        console.log("Appliction:",newApplicationrecord);
        
        let users = JSON.parse(localStorage.getItem('users')) || [];
        const userIndex = users.findIndex(user => user.id === currentuser.id);

        if (userIndex === -1) {
            throw new Error("Current user not found in user database during job application.");
        }
        if (!users[userIndex].appliedjobs) users[userIndex].appliedjobs = [];

        const jobSeekerAppliedJobEntry = {
            jobid: jobApplicationform.jobId, 
            jobtitle: jobApplicationform.jobtitle,
            company: jobApplicationform.company,
            applicationRecordId: newApplicationrecord.id,
            appliedDate: newApplicationrecord.applicationDate 
        };

        users[userIndex].appliedjobs.push(jobSeekerAppliedJobEntry); 
        localStorage.setItem('users', JSON.stringify(users)); 

        const updatedCurrentUser = { ...currentuser, appliedjobs: [...currentuser.appliedjobs, jobSeekerAppliedJobEntry] };
        setCurrentuser(updatedCurrentUser);
        localStorage.setItem('currentuser', JSON.stringify(updatedCurrentUser));
        console.log(`User ${currentuser.id} applied to job ${jobApplicationform.jobId}.`);

        return newApplicationrecord;
    

    },[currentuser,setCurrentuser,addApplicationrecord])

    const authValue=useMemo(()=>({
        currentuser,
        loading,
        register,
        login,
        logout,
        savejob,
        applyJob,
        unsave

    }),[currentuser,loading, register,login,logout,savejob,applyJob,unsave])

    return(
        <Authcontext.Provider value={authValue}>
            {!loading && children}
        </Authcontext.Provider>
    )

}
export default Authcontext